# Тег версии.
version: "3.0"

# Сервис = контейнер.
# Сервисом может быть клиент, сервер, сервер баз данных...
services:
  # База данных
  db:
    # Имя контейнера. Выбирается произвольно.
    container_name: "db"

    # Сторонний образ. Скачивается из реестра Docker, если отсутствует локально.
    # Формат image:tag, где image - имя, tag - номер версии образа.
    # Если tag не указан, будет присвоено значение "latest".
    image: postgres:14.1-alpine

    restart: always

    # Значения переменных окружения, передаваемых в контейнер
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

    # Перенаправление порта контейнера на порт гостевой ОС для доступа извне
    # [порт ОС]:[порт контейнера]
    ports:
      - "5432:5432"

    # Имя сети, к которой подключается контейнер
    networks:
      - custom

    # Том для хранения базы данных
    volumes:
      - db-data:/var/lib/postgresql/data

  # Основное приложение
  university_app:

    container_name: university_app

    # Собственный образ. Создаётся в соответствии с инструкцией "build".
    # Имя образа выбирается произвольно.
    image: university_app

    # Зависимость: запуск текущего контейнера будет выполнен
    # после указанных в списке
    depends_on:
      - db
      - alembic_migrations

    environment:
      REAL_DATABASE_URL: "postgresql+asyncpg://postgres:postgres@db:5432/postgres"
      SENTRY_URL: "https://a9c3a309c76f4258807ac0f1258ddbf0@o4505300250263552.ingest.sentry.io/4505300255113216"

    # параметры сборки образа
    build:
      context: .  # из корневого каталога проекта
      dockerfile: Dockerfile

    ports:
      - "8000:8000"

    networks:
      - custom

  # Автоматические миграции
  alembic_migrations:
    container_name: alembic_migrations
    image: alembic_migrations

    # Команда, выполняющаяся внутри контейнера после его запуска.
    # Конструкция sh -c 'command' используется для выполнения команды внутри контейнера.
    # Команда состоит из двух частей, разделённых оператором '&&'.
    # 'chmod +x run.sh' - устанавливает права на исполнение (execute) для файла run.sh
    # './run.sh' - запускает скрипт run.sh, используя './' для указания текущего
    # каталога внутри контейнера.
    command: sh -c 'chmod +x run.sh && ./run.sh'
    depends_on:
      - db
    environment:
      ALEMBIC_DATABASE_URL: "postgresql://postgres:postgres@db:5432/postgres"
      REAL_DATABASE_URL: "postgresql+asyncpg://postgres:postgres@db:5432/postgres"
      SENTRY_URL: "https://a9c3a309c76f4258807ac0f1258ddbf0@o4505300250263552.ingest.sentry.io/4505300255113216"
      APP_PORT: "8001"
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    networks:
      - custom

  # Prometheus - сервер сбора и хранения данных для мониторинга
  prometheus:
    depends_on:
      - university_app
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - custom

  # Grafana - веб-интерфейс для Prometheus
  grafana:
    image: grafana/grafana:8.5.22
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - custom

# Сетевое взаимодействие между контейнерами
networks:
  # Имя сети
  custom:
    # Выбор варианта организации сети.
    # Bridge - создаётся внутренняя скрытая сеть.
    # Можно указать IP-адрес и подсеть. Без указания Docker выбирает следующую
    # подсеть, доступную в пространстве приватных IP-адресов.
    driver: bridge

volumes:
  db-data:
  grafana-data:
  grafana-config:
  prometheus-data:
